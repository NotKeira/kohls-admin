[{"title":"Checkbox","type":0,"sectionRef":"#","url":"/api/Checkbox","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#types","content":" "},{"title":"CheckboxDefinition​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#CheckboxDefinition","content":"&lt;/&gt; type CheckboxDefinition = { Value: Types.Stateful&lt;boolean&gt;, _instance: TextButton } A generic function type "},{"title":"Functions​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#new","content":"&lt;/&gt; Checkbox.new(definition: CheckboxDefinition) → () Creates a new checkbox. "},{"title":"Flux","type":0,"sectionRef":"#","url":"/api/Flux","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Flux","url":"/api/Flux#types","content":" "},{"title":"Function​","type":1,"pageTitle":"Flux","url":"/api/Flux#Function","content":"&lt;/&gt; type Function = (...any) → ...any A generic function type  "},{"title":"List​","type":1,"pageTitle":"Flux","url":"/api/Flux#List","content":"&lt;/&gt; type List = {T} A generic list type  "},{"title":"Set​","type":1,"pageTitle":"Flux","url":"/api/Flux#Set","content":"&lt;/&gt; type Set = {[T]: boolean} A generic set type implemented as a table with boolean values  "},{"title":"Dict​","type":1,"pageTitle":"Flux","url":"/api/Flux#Dict","content":"&lt;/&gt; type Dict = {[T]: any} Represents a dictionary-like table with keys of type T and values of any type.  "},{"title":"State​","type":1,"pageTitle":"Flux","url":"/api/Flux#State","content":"&lt;/&gt; type State = { _update: (State&lt;T&gt;) → boolean, _dependencies: Set&lt;State&lt;T&gt;&gt;, _dependents: Set&lt;State&lt;T&gt;&gt;, _binds: { [T]: any, _cleanup: List&lt;any&gt; }, _hooks: Dict&lt;Function&gt;, _value: T, _stateful: boolean, _operation: List&lt;any&gt;?, _tweenInfo: TweenInfo? , set: ( self: State&lt;T&gt;, new: T, force: boolean?, noTween: boolean? ) → State&lt;T&gt;, get: (self: State&lt;T&gt;) → T, hook: ( self: State&lt;T&gt;, callback: Function ) → Function, Destroy: (self: State&lt;T&gt;) → (), bindToProperty: ( self: State&lt;T&gt;, instance: Instance , property: string ) → (), bindToAttribute: ( self: State&lt;T&gt;, instance: Instance , attribute: string ) → (), } Represents a reactive state object in the Flux system  "},{"title":"Stateful<T>​","type":1,"pageTitle":"Flux","url":"/api/Flux#Stateful<T>","content":"&lt;/&gt; type Stateful&lt;T&gt; = =T | State&lt;T&gt; A type for state or raw values  "},{"title":"SpecialKey​","type":1,"pageTitle":"Flux","url":"/api/Flux#SpecialKey","content":"&lt;/&gt; type SpecialKey = ={type: &quot;SpecialKey&quot;} A type for state or raw values  "},{"title":"SpecialDefinition​","type":1,"pageTitle":"Flux","url":"/api/Flux#SpecialDefinition","content":"&lt;/&gt; type SpecialDefinition = ={[number | string | SpecialKey]: unknown} Represents the definition used in Flux.new and Flux.edit  "},{"title":"Scope​","type":1,"pageTitle":"Flux","url":"/api/Flux#Scope","content":"&lt;/&gt; type Scope = {[any]=Scope | any}  "},{"title":"Properties​","type":1,"pageTitle":"Flux","url":"/api/Flux#properties","content":" "},{"title":"Scope​","type":1,"pageTitle":"Flux","url":"/api/Flux#Scope","content":"&lt;/&gt; Flux.Scope: Scope A scope object for organizing and cleaning up Flux states  "},{"title":"Attribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#Attribute","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Attribute: SpecialKey A marker for defining Instance attributes in Flux.edit  "},{"title":"Children​","type":1,"pageTitle":"Flux","url":"/api/Flux#Children","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Children: SpecialKey A marker for defining Instance children in Flux.edit  "},{"title":"Event​","type":1,"pageTitle":"Flux","url":"/api/Flux#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Event: SpecialKey&amp;{ Attribute=SpecialKey, Property=SpecialKey } Markers for defining events in Flux.edit "},{"title":"Functions​","type":1,"pageTitle":"Flux","url":"/api/Flux#functions","content":" "},{"title":"isState​","type":1,"pageTitle":"Flux","url":"/api/Flux#isState","content":"&lt;/&gt; Flux.isState(object: any) → boolean Checks if an object is a Flux state  "},{"title":"peek​","type":1,"pageTitle":"Flux","url":"/api/Flux#peek","content":"&lt;/&gt; Flux.peek(object: T) → T Gets the current value of a Flux state or returns the input if it's not a state  "},{"title":"peekVariadic​","type":1,"pageTitle":"Flux","url":"/api/Flux#peekVariadic","content":"&lt;/&gt; Flux.peekVariadic(...: any) → ...any Gets the current values of multiple Flux states or non-state inputs  "},{"title":"edit​","type":1,"pageTitle":"Flux","url":"/api/Flux#edit","content":"&lt;/&gt; Flux.edit( instance: Instance , definition: SpecialDefinition&amp;Instance ) → Instance  Edits an existing Instance with Flux state bindings and other properties  "},{"title":"new​","type":1,"pageTitle":"Flux","url":"/api/Flux#new","content":"&lt;/&gt; Flux.new(className: string) → Flux.edit Creates a new Instance with Flux state bindings and other properties  "},{"title":"computeFrom​","type":1,"pageTitle":"Flux","url":"/api/Flux#computeFrom","content":"&lt;/&gt; Flux.computeFrom( computation: (...any) → T, ...: any ) → State&lt;T&gt; Creates a computed state based on other states or static values  "},{"title":"compute​","type":1,"pageTitle":"Flux","url":"/api/Flux#compute","content":"&lt;/&gt; Flux.compute(computation: (use: &lt;U&gt;(U | State&lt;U&gt;) → U?) → T) → State&lt;T&gt; Creates a computed state, passing a use function to access and bind other states  "},{"title":"tween​","type":1,"pageTitle":"Flux","url":"/api/Flux#tween","content":"&lt;/&gt; Flux.tween( tweenInfo: TweenInfo , state: State&lt;T&gt; ) → State&lt;T&gt; Applies TweenService tweens with Instance properties bound to the Flux state  "},{"title":"state​","type":1,"pageTitle":"Flux","url":"/api/Flux#state","content":"&lt;/&gt; Flux.state( initialValue: T | State&lt;T&gt; | Instance , property: string? ) → State&lt;T&gt; Creates a new Flux state with an initial value  "},{"title":"_addDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_addDependency","content":"&lt;/&gt; Flux:_addDependency(dependency: State&lt;T&gt;) → () Adds a dependency to the current state  "},{"title":"_removeDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_removeDependency","content":"&lt;/&gt; Flux:_removeDependency(dependency: State&lt;T&gt;) → () Removes a dependency from the current state  "},{"title":"_update​","type":1,"pageTitle":"Flux","url":"/api/Flux#_update","content":"&lt;/&gt; Flux:_update(noTween: boolean?) → () Updates the state and propagates changes to dependents  "},{"title":"Destroy​","type":1,"pageTitle":"Flux","url":"/api/Flux#Destroy","content":"&lt;/&gt; Flux:Destroy() → () Destroys the state, clearing all dependencies and bindings  "},{"title":"hook​","type":1,"pageTitle":"Flux","url":"/api/Flux#hook","content":"&lt;/&gt; Flux:hook(callback: Function) → Function Adds a hook callback function to be called when the state changes  "},{"title":"get​","type":1,"pageTitle":"Flux","url":"/api/Flux#get","content":"&lt;/&gt; Flux:get() → any Gets the current value of the state  "},{"title":"set​","type":1,"pageTitle":"Flux","url":"/api/Flux#set","content":"&lt;/&gt; Flux:set( new: T, forceUpdate: boolean?, noTween: boolean? ) → State&lt;T&gt; Sets a new value for the state and triggers an update  "},{"title":"bindToProperty​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToProperty","content":"&lt;/&gt; Flux:bindToProperty( instance: Instance , property: string ) → () Binds the state to a property of an Instance  "},{"title":"bindToAttribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToAttribute","content":"&lt;/&gt; Flux:bindToAttribute( instance: Instance , attribute: string ) → () Binds the state to an attribute of an Instance "},{"title":"UI","type":0,"sectionRef":"#","url":"/api/UI","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"UI","url":"/api/UI#types","content":" "},{"title":"Theme​","type":1,"pageTitle":"UI","url":"/api/UI#Theme","content":"&lt;/&gt; interface Theme { ClackAll: State&lt;boolean&gt; ClackEnabled: State&lt;boolean&gt; Transparency: State&lt;number&gt; Primary: State&lt;Color3 &gt; PrimaryText: State&lt;Color3 &gt; Secondary: State&lt;Color3 &gt; SecondaryText: State&lt;Color3 &gt; Muted: State&lt;Color3 &gt; MutedText: State&lt;Color3 &gt; Border: State&lt;Color3 &gt; BorderMuted: State&lt;Color3 &gt; Valid: State&lt;Color3 &gt; Invalid: State&lt;Color3 &gt; FontSize: State&lt;number&gt; Font: State&lt;Font &gt; FontMono: State&lt;Font &gt; FontHeavy: State&lt;Font &gt; FontBold: State&lt;Font &gt; FontSemiBold: State&lt;Font &gt; FontLight: State&lt;Font &gt; CornerRadius: State&lt;UDim &gt; CornerHalf: State&lt;UDim &gt; CornerDiameter: State&lt;UDim &gt; Padding: State&lt;UDim &gt; PaddingHalf: State&lt;UDim &gt; PaddingDouble: State&lt;UDim &gt; StrokeEnabled: State&lt;boolean&gt; NormalTween: State&lt;TweenInfo &gt; TransparencyClamped: State&lt;number&gt; ScrollMidImage: State&lt;string&gt; ScrollTopImage: State&lt;string&gt; ScrollBottomImage: State&lt;string&gt; } A directory of Flux state for UI components to use as theme variables "},{"title":"Properties​","type":1,"pageTitle":"UI","url":"/api/UI#properties","content":" "},{"title":"GuiService​","type":1,"pageTitle":"UI","url":"/api/UI#GuiService","content":"&lt;/&gt; UI.GuiService: GuiService    "},{"title":"TextService​","type":1,"pageTitle":"UI","url":"/api/UI#TextService","content":"&lt;/&gt; UI.TextService: TextService    "},{"title":"UserInputService​","type":1,"pageTitle":"UI","url":"/api/UI#UserInputService","content":"&lt;/&gt; UI.UserInputService: UserInputService    "},{"title":"PlayerGui​","type":1,"pageTitle":"UI","url":"/api/UI#PlayerGui","content":"&lt;/&gt; UI.PlayerGui: PlayerGui    "},{"title":"Attribute​","type":1,"pageTitle":"UI","url":"/api/UI#Attribute","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Attribute: newproxy A marker for defining Instance attributes in UI.edit  "},{"title":"Children​","type":1,"pageTitle":"UI","url":"/api/UI#Children","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Children: newproxy A marker for defining Instance children in UI.edit  "},{"title":"Event​","type":1,"pageTitle":"UI","url":"/api/UI#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Event: { Attribute=newproxy, Property=newproxy } Markers for defining events in UI.edit  "},{"title":"Hook​","type":1,"pageTitle":"UI","url":"/api/UI#Hook","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Hook: newproxy A marker for defining UI state hooks in UI.edit  "},{"title":"Nil​","type":1,"pageTitle":"UI","url":"/api/UI#Nil","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Nil: newproxy A marker for defining Nil defaultState in UI.makeStatefulDefaults  "},{"title":"Scope​","type":1,"pageTitle":"UI","url":"/api/UI#Scope","content":"&lt;/&gt; UI.Scope: Scope A scope object for organizing and cleaning up UI states  "},{"title":"TopbarInset​","type":1,"pageTitle":"UI","url":"/api/UI#TopbarInset","content":"&lt;/&gt; UI.TopbarInset: State&lt;Rect &gt; GuiService.TopbarInset as a Flux state  "},{"title":"LayerBottom​","type":1,"pageTitle":"UI","url":"/api/UI#LayerBottom","content":"&lt;/&gt; UI.LayerBottom: State&lt;ScreenGui &gt; The lowermost ScreenGui for UI components  "},{"title":"LayerDefault​","type":1,"pageTitle":"UI","url":"/api/UI#LayerDefault","content":"&lt;/&gt; UI.LayerDefault: State&lt;ScreenGui &gt; The default ScreenGui for UI components  "},{"title":"LayerTop​","type":1,"pageTitle":"UI","url":"/api/UI#LayerTop","content":"&lt;/&gt; UI.LayerTop: State&lt;ScreenGui &gt; The topmost ScreenGui for UI components  "},{"title":"LayerTopBar​","type":1,"pageTitle":"UI","url":"/api/UI#LayerTopBar","content":"&lt;/&gt; UI.LayerTopBar: State&lt;ScreenGui &gt; The TopBar ScreenGui for UI components  "},{"title":"TopBarFrame​","type":1,"pageTitle":"UI","url":"/api/UI#TopBarFrame","content":"&lt;/&gt; UI.TopBarFrame: State&lt;Frame &gt; A sorted TopBar Frame for UI components, parented under UI.LayerTopBar "},{"title":"Functions​","type":1,"pageTitle":"UI","url":"/api/UI#functions","content":" "},{"title":"handleHover​","type":1,"pageTitle":"UI","url":"/api/UI#handleHover","content":"&lt;/&gt; UI.handleHover(hoverState: State&lt;boolean&gt;) → () Handles a global hovering state for specific edge-cases  "},{"title":"getLuminance​","type":1,"pageTitle":"UI","url":"/api/UI#getLuminance","content":"&lt;/&gt; UI.getLuminance(color: Color3 ) → number Gets the luminance of a Color3  "},{"title":"invertLuminance​","type":1,"pageTitle":"UI","url":"/api/UI#invertLuminance","content":"&lt;/&gt; UI.invertLuminance( color: Color3 , amount: number ) → Color3  Inverts the luminance of a Color3 by an amount  "},{"title":"pointInGuiObject​","type":1,"pageTitle":"UI","url":"/api/UI#pointInGuiObject","content":"&lt;/&gt; UI.pointInGuiObject( x: number, y: number, object: GuiObject ) → () Checks if x, y is within the absolute bounds of the GuiObject  "},{"title":"makeStatefulDefaults​","type":1,"pageTitle":"UI","url":"/api/UI#makeStatefulDefaults","content":"&lt;/&gt; UI.makeStatefulDefaults( default: Dict&lt;any&gt;, definition: SpecialDefinition? ) → () Helper function for defining Flux state defaults  "},{"title":"edit​","type":1,"pageTitle":"UI","url":"/api/UI#edit","content":"&lt;/&gt; UI.edit( new: Instance | Dict&lt;any&gt;, definition: SpecialDefinition | GuiObject ) → () Inherits Flux.edit Parents children to the ._content variable of a UI component if one exists Numeric indicies are defined as children with GuiObject.LayoutOrder set to the index Allows UI.Hook to easily hook to default UI state or RBXScriptSignal aliases  "},{"title":"new​","type":1,"pageTitle":"UI","url":"/api/UI#new","content":"&lt;/&gt; UI.new(className: string) → UI.edit Creates a new Instance with UI.edit  "},{"title":"register​","type":1,"pageTitle":"UI","url":"/api/UI#register","content":"&lt;/&gt; UI.register( className: string, class: Dict&lt;any&gt; ) → () Registers a new UI component class  "},{"title":"registerChildren​","type":1,"pageTitle":"UI","url":"/api/UI#registerChildren","content":"&lt;/&gt; UI.registerChildren() → typeof(UI) Run to register all default children in the UI module "}]