[{"title":"UI","type":0,"sectionRef":"#","url":"/api/UI","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"UI","url":"/api/UI#properties","content":" "},{"title":"Theme​","type":1,"pageTitle":"UI","url":"/api/UI#Theme","content":"&lt;/&gt; UI.Theme: Dict   "},{"title":"Hook​","type":1,"pageTitle":"UI","url":"/api/UI#Hook","content":"&lt;/&gt; UI.Hook: newproxy   "},{"title":"Nil​","type":1,"pageTitle":"UI","url":"/api/UI#Nil","content":"&lt;/&gt; UI.Nil: newproxy   "},{"title":"TopbarInset​","type":1,"pageTitle":"UI","url":"/api/UI#TopbarInset","content":"&lt;/&gt; UI.TopbarInset: State&lt;Rect &gt;  "},{"title":"Flux","type":0,"sectionRef":"#","url":"/api/Flux","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Flux","url":"/api/Flux#types","content":" "},{"title":"Function​","type":1,"pageTitle":"Flux","url":"/api/Flux#Function","content":"&lt;/&gt; type Function = (...any) → ...any A generic function type  "},{"title":"List​","type":1,"pageTitle":"Flux","url":"/api/Flux#List","content":"&lt;/&gt; type List = {T} A generic list type  "},{"title":"Set​","type":1,"pageTitle":"Flux","url":"/api/Flux#Set","content":"&lt;/&gt; type Set = {[T]: boolean} A generic set type implemented as a table with boolean values  "},{"title":"Dict​","type":1,"pageTitle":"Flux","url":"/api/Flux#Dict","content":"&lt;/&gt; type Dict = {[T]: any} Represents a dictionary-like table with keys of type T and values of any type.  "},{"title":"State​","type":1,"pageTitle":"Flux","url":"/api/Flux#State","content":"&lt;/&gt; type State = { _update: (State&lt;T&gt;) → boolean, _dependencies: Set&lt;State&lt;T&gt;&gt;, _dependents: Set&lt;State&lt;T&gt;&gt;, _binds: { [T]: any, _cleanup: List&lt;any&gt; }, _hooks: Dict&lt;Function&gt;, _value: T, _stateful: boolean, _operation: List&lt;any&gt;?, _tweenInfo: TweenInfo? , set: ( self: State&lt;T&gt;, new: T, force: boolean?, noTween: boolean? ) → State&lt;T&gt;, get: (self: State&lt;T&gt;) → T, hook: ( self: State&lt;T&gt;, callback: Function ) → Function, Destroy: (self: State&lt;T&gt;) → (), bindToProperty: ( self: State&lt;T&gt;, instance: Instance , property: string ) → (), bindToAttribute: ( self: State&lt;T&gt;, instance: Instance , attribute: string ) → (), } Represents a reactive state object in the Flux system  "},{"title":"Scope​","type":1,"pageTitle":"Flux","url":"/api/Flux#Scope","content":"&lt;/&gt; type Scope = {[any]=Scope | any}  "},{"title":"Properties​","type":1,"pageTitle":"Flux","url":"/api/Flux#properties","content":" "},{"title":"Scope​","type":1,"pageTitle":"Flux","url":"/api/Flux#Scope","content":"&lt;/&gt; Flux.Scope: Scope A scope object for organizing and cleaning up Flux states  "},{"title":"Attribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#Attribute","content":"&lt;/&gt; Flux.Attribute: newproxy A marker for defining Instance attributes in Flux.edit  "},{"title":"Children​","type":1,"pageTitle":"Flux","url":"/api/Flux#Children","content":"&lt;/&gt; Flux.Children: newproxy A marker for defining Instance children in Flux.edit  "},{"title":"Event​","type":1,"pageTitle":"Flux","url":"/api/Flux#Event","content":"&lt;/&gt; Flux.Event: { Attribute=newproxy, Property=newproxy } Markers for defining events in Flux.edit "},{"title":"Functions​","type":1,"pageTitle":"Flux","url":"/api/Flux#functions","content":" "},{"title":"isState​","type":1,"pageTitle":"Flux","url":"/api/Flux#isState","content":"&lt;/&gt; Flux.isState(object: any) → boolean Checks if an object is a Flux state  "},{"title":"peek​","type":1,"pageTitle":"Flux","url":"/api/Flux#peek","content":"&lt;/&gt; Flux.peek(object: T) → T Gets the current value of a Flux state or returns the input if it's not a state  "},{"title":"peekVariadic​","type":1,"pageTitle":"Flux","url":"/api/Flux#peekVariadic","content":"&lt;/&gt; Flux.peekVariadic(...: any) → ...any Gets the current values of multiple Flux states or non-state inputs  "},{"title":"edit​","type":1,"pageTitle":"Flux","url":"/api/Flux#edit","content":"&lt;/&gt; Flux.edit( instance: Instance , definition: Dict&lt;any&gt; ) → Instance  Edits an existing Instance with Flux state bindings and other properties  "},{"title":"new​","type":1,"pageTitle":"Flux","url":"/api/Flux#new","content":"&lt;/&gt; Flux.new(className: string) → (properties: Dict&lt;any&gt;) → Instance  Creates a new Instance with Flux state bindings and other properties  "},{"title":"computeFrom​","type":1,"pageTitle":"Flux","url":"/api/Flux#computeFrom","content":"&lt;/&gt; Flux.computeFrom( computation: (...any) → T, ...: any ) → State&lt;T&gt; Creates a computed state based on other states or static values  "},{"title":"compute​","type":1,"pageTitle":"Flux","url":"/api/Flux#compute","content":"&lt;/&gt; Flux.compute(computation: (use: &lt;U&gt;(U | State&lt;U&gt;) → U?) → T) → State&lt;T&gt; Creates a computed state, passing a use function to access and bind other states  "},{"title":"tween​","type":1,"pageTitle":"Flux","url":"/api/Flux#tween","content":"&lt;/&gt; Flux.tween( tweenInfo: TweenInfo , state: State&lt;T&gt; ) → State&lt;T&gt; Applies TweenService tweens with Instance properties bound to the Flux state  "},{"title":"state​","type":1,"pageTitle":"Flux","url":"/api/Flux#state","content":"&lt;/&gt; Flux.state( initialValue: T | State&lt;T&gt; | Instance , property: string? ) → State&lt;T&gt; Creates a new Flux state with an initial value  "},{"title":"_addDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_addDependency","content":"&lt;/&gt; Flux:_addDependency(dependency: State&lt;T&gt;) → () Adds a dependency to the current state  "},{"title":"_removeDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_removeDependency","content":"&lt;/&gt; Flux:_removeDependency(dependency: State&lt;T&gt;) → () Removes a dependency from the current state  "},{"title":"_update​","type":1,"pageTitle":"Flux","url":"/api/Flux#_update","content":"&lt;/&gt; Flux:_update(noTween: boolean?) → () Updates the state and propagates changes to dependents  "},{"title":"Destroy​","type":1,"pageTitle":"Flux","url":"/api/Flux#Destroy","content":"&lt;/&gt; Flux:Destroy() → () Destroys the state, clearing all dependencies and bindings  "},{"title":"hook​","type":1,"pageTitle":"Flux","url":"/api/Flux#hook","content":"&lt;/&gt; Flux:hook(callback: Function) → Function Adds a hook callback function to be called when the state changes  "},{"title":"get​","type":1,"pageTitle":"Flux","url":"/api/Flux#get","content":"&lt;/&gt; Flux:get() → any Gets the current value of the state  "},{"title":"set​","type":1,"pageTitle":"Flux","url":"/api/Flux#set","content":"&lt;/&gt; Flux:set( new: T, forceUpdate: boolean?, noTween: boolean? ) → State&lt;T&gt; Sets a new value for the state and triggers an update  "},{"title":"bindToProperty​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToProperty","content":"&lt;/&gt; Flux:bindToProperty( instance: Instance , property: string ) → () Binds the state to a property of an Instance  "},{"title":"bindToAttribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToAttribute","content":"&lt;/&gt; Flux:bindToAttribute( instance: Instance , attribute: string ) → () Binds the state to an attribute of an Instance "}]