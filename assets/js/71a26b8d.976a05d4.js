"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[472],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=o.createContext({}),c=function(e){var n=o.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(m.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,m=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=c(t),p=a,h=l["".concat(m,".").concat(p)]||l[p]||u[p]||r;return t?o.createElement(h,i(i({ref:n},d),{},{components:t})):o.createElement(h,i({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=p;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},71430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const r={sidebar_position:3},i="Custom Commands",s={unversionedId:"custom_commands",id:"custom_commands",title:"Custom Commands",description:"Kohl's Admin is currently in development. Everything in these docs is subject to change.",source:"@site/docs/custom_commands.mdx",sourceDirName:".",slug:"/custom_commands",permalink:"/docs/custom_commands",draft:!1,editUrl:"https://github.com/kohls-admin/main/edit/master/docs/custom_commands.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/docs/getting-started/installation"},next:{title:"Troubleshoot",permalink:"/docs/troubleshooting"}},m={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Addon Setup",id:"addon-setup",level:2},{value:"Creating a Custom Command",id:"creating-a-custom-command",level:2}],d={toc:c},l="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-commands"},"Custom Commands"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Kohl's Admin is currently in development. Everything in these docs is subject to change.")),(0,a.kt)("p",null,"Custom commands are a core part of what makes Kohl's Admin as versatile as it is. This section will guide you through creation of your first custom commands!"),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,'Make sure you have the Kohl\'s Admin script in your experience. Ensure that the script has a child folder named "Addons".\nBy default this folder will contain some example addons.'),(0,a.kt)("h2",{id:"addon-setup"},"Addon Setup"),(0,a.kt)("p",null,"All custom commands are part of an ",(0,a.kt)("a",{parentName:"p",href:"/docs/addons"},"Addon"),". For this section we will create addons that only create custom commands, but in later parts we will show the extent of what addons can do."),(0,a.kt)("p",null,"All addons are module scripts that return a function. To start, create a module script and inside of it write the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"return function(_K)\n    -- Addon code goes here!\nend\n")),(0,a.kt)("p",null,'Inside of this function is where we will be adding our custom commands.\nThe name of the addon can be anything, but for this example we encourage "customCommands".'),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},'Appending "Client" or "Server" to the end of an addon file\'s name will make it only run in that context. This will make the other context unaware of the command!')),(0,a.kt)("h2",{id:"creating-a-custom-command"},"Creating a Custom Command"),(0,a.kt)("p",null,"To create a custom command, you must register it with the ",(0,a.kt)("a",{parentName:"p",href:"/api/Registry"},"Registry"),", using ",(0,a.kt)("a",{parentName:"p",href:"/api/Registry#registerCommand"},"registerCommand()"),"."),(0,a.kt)("p",null,"Using this, our module becomes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"return function(_K)\n    _K.Registry.registerCommand(_K, commandDefinition)\nend\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"commandDefinition")," is a placeholder for the real contents of our command! Commands require a lot of information, structured in a ",(0,a.kt)("a",{parentName:"p",href:"/api/Registry#CommandDefinition"},"commandDefinition"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"type commandDefinition {\nname: string, -- Name of the command.\naliases: { string }?, -- Table of aliases.\ndescription: string, -- Description of what the command does.\ngroup: string, -- What group the command belongs to.\nargs: { ArgumentDefinition }, -- A table of argument definitions.\nenvClient: {} | () -> {}?, -- Sets up an environment for the command.\nenv: {} | () -> {}?, -- Sets up an environment for the command.\nrunClient: (...any) -> ()?, -- What runs on the client of the player that ran the command.\nrun: (...any) -> ()? -- What the command runs on the server.\n}\n")),(0,a.kt)("p",null,"To give an example, this is the code from the ",(0,a.kt)("inlineCode",{parentName:"p"},"ExampleAddon"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'return function(_K)\n  print("Hello World from ExampleAddon! IsServer:", _K.IsServer)\n\n  _K.Registry.registerCommand(_K, {\n   name = "customcommand",\n   aliases = { "customcommandalias" },\n   description = "Custom command description.",\n   group = "General", -- Command group to use.\n   args = {\n    {\n     type = "stringGreedy",\n     name = "Message",\n     description = "The message to send.", -- Description shown in command listings.\n    },\n   },\n   runClient = function(context, message) -- Function that runs on executing player\'s client.\n    print("Custom command ran on the client!", context, message)\n   end,\n   run = function(context, message) -- Function that runs on the server.\n    print("Custom command ran on server!", context, message)\n    local msgObject = Instance.new("Message")\n    msgObject.Text = message\n    msgObject.Parent = workspace\n    task.delay(5, function()\n     msgObject:Destroy()\n    end)\n   end,\n  })\nend\n')),(0,a.kt)("p",null,"This command creates a ",(0,a.kt)("inlineCode",{parentName:"p"},"Message")," instance and populates it with the player provided message. As you can see, the command is registered with a dictionary that lists all information about the command."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can put multiple custom commands in one addon! All you need to do is register multiple commands in the same module.")),(0,a.kt)("p",null,"In later sections, we'll cover more advanced uses of custom commands, including environments and other advanced functionality."))}u.isMDXComponent=!0}}]);