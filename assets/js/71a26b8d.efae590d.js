"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[472],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=o.createContext({}),l=function(e){var n=o.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(m.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,m=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(t),p=a,h=d["".concat(m,".").concat(p)]||d[p]||u[p]||r;return t?o.createElement(h,s(s({ref:n},c),{},{components:t})):o.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=p;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},71430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(87462),a=(t(67294),t(3905));const r={sidebar_position:3},s="Custom Commands",i={unversionedId:"custom_commands",id:"custom_commands",title:"Custom Commands",description:"Kohl's Admin is currently in development. Everything in these docs is subject to change.",source:"@site/docs/custom_commands.mdx",sourceDirName:".",slug:"/custom_commands",permalink:"/docs/custom_commands",draft:!1,editUrl:"https://github.com/kohls-admin/kohls-admin/edit/master/docs/custom_commands.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Using UIs",permalink:"/docs/getting-started/using_uis"},next:{title:"Troubleshoot",permalink:"/docs/troubleshooting"}},m={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Addon Setup",id:"addon-setup",level:2},{value:"Creating a Custom Command",id:"creating-a-custom-command",level:2}],c={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-commands"},"Custom Commands"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Kohl's Admin is currently in development. Everything in these docs is subject to change.")),(0,a.kt)("p",null,"Custom commands are a powerful feature that lets you personalize Kohl's Admin, automate tasks, streamline your workflows, and create unique interactions within your experience."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Make sure you have Kohl's Admin:")," Ensure that Kohl's Admin is ",(0,a.kt)("a",{parentName:"li",href:"/docs/intro"},"present in your experience"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Addons Folder"),": Confirm that Kohl's Admin has a folder named ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"Addons")),". This is where you'll place your custom command scripts.")),(0,a.kt)("h2",{id:"addon-setup"},"Addon Setup"),(0,a.kt)("p",null,"All custom commands are part of an ",(0,a.kt)("a",{parentName:"p",href:"/docs/addons"},"Addon"),". For this section we will create addons that only create custom commands, but in later parts we will show the extent of what addons can do."),(0,a.kt)("p",null,"All addons are a ",(0,a.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/ModuleScript"},"ModuleScript")," that returns a function. To start, create a module script and inside of it write the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"return function(_K)\n    -- Addon code goes here!\nend\n")),(0,a.kt)("p",null,'Inside of this function is where we will be adding our custom commands.\nThe name of the addon can be anything, but for this example we encourage "customCommands".'),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Adding ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Client"))," or ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Server"))," an Addon file's name will make it only run in that context. This will make the other context unaware of the command!")),(0,a.kt)("h2",{id:"creating-a-custom-command"},"Creating a Custom Command"),(0,a.kt)("p",null,"To create a custom command, you must register it with the ",(0,a.kt)("a",{parentName:"p",href:"/api/Registry"},"Registry"),", using ",(0,a.kt)("a",{parentName:"p",href:"/api/Registry#registerCommand"},"registerCommand()"),"."),(0,a.kt)("p",null,"Using this, our module becomes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"return function(_K)\n    _K.Registry.registerCommand(_K, commandDefinition)\nend\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"commandDefinition")," is a placeholder for the real contents of our command! Commands require a lot of information, structured in a ",(0,a.kt)("a",{parentName:"p",href:"/api/Registry#CommandDefinition"},"commandDefinition"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"type commandDefinition {\nname: string, -- Name of the command.\naliases: { string }?, -- Table of aliases.\ndescription: string, -- Description of what the command does.\ngroup: string, -- What group the command belongs to.\nargs: { ArgumentDefinition }, -- A table of argument definitions.\nenvClient: {} | () -> {}?, -- Sets up an environment for the command.\nenv: {} | () -> {}?, -- Sets up an environment for the command.\nrunClient: (...any) -> ()?, -- What runs on the client of the player that ran the command.\nrun: (...any) -> ()? -- What the command runs on the server.\n}\n")),(0,a.kt)("p",null,"To give an example, this is the code from the ",(0,a.kt)("inlineCode",{parentName:"p"},"ExampleAddon"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- addons not containing in "Client" or "Server" will run in both contexts (shared)\nreturn function(_K)\n    _K.log(`Hello World from ExampleAddon!`, "INFO")\n\n    _K.Registry.registerCommand(_K, {\n        name = "customcommand",\n        aliases = { "customcommandalias", "customcommandalias2" },\n        description = "Custom command description.",\n\n        -- The command group to sort the command by, this is what roles use to easily assign groups of commands.\n        -- Default groups in order of abusability are "Utility", "Environment", "General", "Fun", "Moderation", "Administration", and "Creator"\n        group = "General", -- Command group to use.\n\n        -- Argument definitions\n        args = {\n            {\n                type = "stringGreedy",\n                name = "Message",\n                description = "The message to send.", -- Description shown in command listings.\n                -- If the command is optional, make sure to check if it\'s nil and not false!\n                optional = true,\n\n                lowerRank = false,\n                ignoreSelf = false,\n                shouldRequest = false,\n            },\n        },\n\n        -- Command environment\n\n        env = function(_K)\n            -- This will only run once on each server\n            _K.log(`Hello World from ExampleAddon customcommand env!`, "INFO")\n\n            -- This table is passed to the `run` function as `context.env`\n            return {\n                countServer = 0,\n            }\n        end,\n\n        envClient = function(_K)\n            -- This will only run once on each client\n            _K.log(`Hello World from ExampleAddon customcommand envClient!`, "INFO")\n\n            -- This table is passed to the `runClient` function as `context.env`\n            return {\n                countClient = 0,\n            }\n        end,\n\n        -- Command execution\n\n        -- Function that runs on the server\n        run = function(context, message: string?)\n            print("Custom command ran on server!", context, message)\n\n            -- Create a simple Roblox message object\n            local messageInstance = Instance.new("Message", workspace)\n\n            -- Since our message is optional we need to check for context.OPTIONAL\n            messageInstance.Text = if message == context.OPTIONAL then "Default message" else message\n\n            -- This will destroy the message after 5 seconds\n            task.delay(5, messageInstance.Destroy, messageInstance)\n\n            -- Number of times the command has been used on this server\n            context.env.countServer += 1\n        end,\n\n        -- Function that runs on the player\'s client\n        runClient = function(context, message)\n            print("Custom command ran on the client!", context, message)\n\n            -- Number of times the command has been used on this client\n            context.env.countClient += 1\n        end,\n    })\nend\n')),(0,a.kt)("p",null,"This command creates a ",(0,a.kt)("inlineCode",{parentName:"p"},"Message")," instance and populates it with the player provided message. As you can see, the command is registered with a dictionary that lists all information about the command."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can put multiple custom commands in one addon! All you need to do is register multiple commands in the same module.")),(0,a.kt)("p",null,"In later sections, we'll cover more advanced uses of custom commands, including environments and other advanced functionality."))}u.isMDXComponent=!0}}]);