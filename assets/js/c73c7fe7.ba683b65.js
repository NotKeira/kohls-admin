"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[615],{85671:e=>{e.exports=JSON.parse('{"functions":[{"name":"isState","desc":"Checks if an object is a Flux state","params":[{"name":"object","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":10,"path":"MainModule/Flux/init.luau"}},{"name":"peek","desc":"Gets the current value of a Flux state or returns the input if it\'s not a state","params":[{"name":"object","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"T\\n"}],"function_type":"static","source":{"line":16,"path":"MainModule/Flux/init.luau"}},{"name":"peekVariadic","desc":"Gets the current values of multiple Flux states or non-state inputs","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"...any\\n"}],"function_type":"static","source":{"line":22,"path":"MainModule/Flux/init.luau"}},{"name":"_addDependency","desc":"Adds a dependency to the current state","params":[{"name":"dependency","desc":"","lua_type":"Types.State<T>"}],"returns":[],"function_type":"method","source":{"line":131,"path":"MainModule/Flux/init.luau"}},{"name":"_removeDependency","desc":"Removes a dependency from the current state","params":[{"name":"dependency","desc":"","lua_type":"Types.State<T>"}],"returns":[],"function_type":"method","source":{"line":140,"path":"MainModule/Flux/init.luau"}},{"name":"_update","desc":"Updates the state and propagates changes to dependents","params":[{"name":"noTween","desc":"","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":154,"path":"MainModule/Flux/init.luau"}},{"name":"Destroy","desc":"Destroys the state, clearing all dependencies and bindings","params":[],"returns":[],"function_type":"method","source":{"line":201,"path":"MainModule/Flux/init.luau"}},{"name":"hook","desc":"Adds a hook callback function to be called when the state changes","params":[{"name":"callback","desc":"","lua_type":"Types.Function"}],"returns":[{"desc":"","lua_type":"Types.Function\\n"}],"function_type":"method","source":{"line":221,"path":"MainModule/Flux/init.luau"}},{"name":"get","desc":"Gets the current value of the state","params":[],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"method","source":{"line":232,"path":"MainModule/Flux/init.luau"}},{"name":"set","desc":"Sets a new value for the state and triggers an update","params":[{"name":"new","desc":"","lua_type":"T"},{"name":"forceUpdate","desc":"","lua_type":"boolean?"},{"name":"noTween","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"Types.State<T>\\n"}],"function_type":"method","source":{"line":237,"path":"MainModule/Flux/init.luau"}},{"name":"bindToProperty","desc":"Binds the state to a property of an Instance","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"property","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":248,"path":"MainModule/Flux/init.luau"}},{"name":"bindToAttribute","desc":"Binds the state to an attribute of an Instance","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attribute","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":265,"path":"MainModule/Flux/init.luau"}},{"name":"edit","desc":"Edits an existing Instance with Flux state bindings and other properties","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"definition","desc":"","lua_type":"Types.Dict<any>"}],"returns":[{"desc":"","lua_type":"Instance\\n"}],"function_type":"static","source":{"line":328,"path":"MainModule/Flux/init.luau"}},{"name":"new","desc":"Creates a new Instance with Flux state bindings and other properties","params":[{"name":"className","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"(properties: Types.Dict<any>) -> Instance\\n"}],"function_type":"static","source":{"line":419,"path":"MainModule/Flux/init.luau"}},{"name":"computeFrom","desc":"Creates a computed state based on other states or static values","params":[{"name":"computation","desc":"","lua_type":"(...any) -> T"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Types.State<T>\\n"}],"function_type":"static","source":{"line":426,"path":"MainModule/Flux/init.luau"}},{"name":"compute","desc":"Creates a computed state, passing a use function to access and bind other states","params":[{"name":"computation","desc":"","lua_type":"(use: <U>(U | Types.State<U>) -> U?) -> T"}],"returns":[{"desc":"","lua_type":"Types.State<T>\\n"}],"function_type":"static","source":{"line":440,"path":"MainModule/Flux/init.luau"}},{"name":"tween","desc":"Applies TweenService tweens with Instance properties bound to the Flux state","params":[{"name":"tweenInfo","desc":"","lua_type":"TweenInfo"},{"name":"state","desc":"","lua_type":"Types.State<T>"}],"returns":[{"desc":"","lua_type":"Types.State<T>\\n"}],"function_type":"static","source":{"line":456,"path":"MainModule/Flux/init.luau"}},{"name":"state","desc":"Creates a new Flux state with an initial value","params":[{"name":"initialValue","desc":"","lua_type":"T | Types.State<T> | Instance"},{"name":"property","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"Types.State<T>\\n"}],"function_type":"static","source":{"line":465,"path":"MainModule/Flux/init.luau"}}],"properties":[{"name":"Scope","desc":"A scope object for organizing and cleaning up Flux states","lua_type":"Scope","source":{"line":110,"path":"MainModule/Flux/init.luau"}},{"name":"Attribute","desc":"A marker for defining Instance attributes in [Flux.edit]","lua_type":"newproxy","readonly":true,"source":{"line":116,"path":"MainModule/Flux/init.luau"}},{"name":"Children","desc":"A marker for defining Instance children in [Flux.edit]","lua_type":"newproxy","readonly":true,"source":{"line":122,"path":"MainModule/Flux/init.luau"}},{"name":"Event","desc":"Markers for defining events in [Flux.edit]","lua_type":"{ Attribute = newproxy, Property = newproxy }","readonly":true,"source":{"line":128,"path":"MainModule/Flux/init.luau"}}],"types":[{"name":"Function","desc":"A generic function type","lua_type":"(...any) -> ...any","source":{"line":4,"path":"MainModule/Flux/Types.luau"}},{"name":"List","desc":"A generic list type","lua_type":"{ T }","source":{"line":9,"path":"MainModule/Flux/Types.luau"}},{"name":"Set","desc":"A generic set type implemented as a table with boolean values","lua_type":"{ [T]: boolean }","source":{"line":14,"path":"MainModule/Flux/Types.luau"}},{"name":"Dict","desc":"Represents a dictionary-like table with keys of type `T` and values of any type.","lua_type":"{ [T]: any }","source":{"line":19,"path":"MainModule/Flux/Types.luau"}},{"name":"State","desc":"Represents a reactive state object in the Flux system","lua_type":"{ _update: (State<T>) -> boolean, _dependencies: Set<State<T>>, _dependents: Set<State<T>>, _binds: { [T]: any, _cleanup: List<any> }, _hooks: Dict<Function>, _value: T, _stateful: boolean, _operation: List<any>?, _tweenInfo: TweenInfo?, set: (self: State<T>, new: T, force: boolean?, noTween: boolean?) -> State<T>, get: (self: State<T>) -> T, hook: (self: State<T>, callback: Function) -> Function, Destroy: (self: State<T>) -> (), bindToProperty: (self: State<T>, instance: Instance, property: string) -> (), bindToAttribute: (self: State<T>, instance: Instance, attribute: string) -> (), }","source":{"line":26,"path":"MainModule/Flux/Types.luau"}},{"name":"Scope","desc":"","lua_type":"{[any] = Scope | any}","source":{"line":74,"path":"MainModule/Flux/init.luau"}}],"name":"Flux","desc":"A library for easily creating and managing reactive state.","source":{"line":90,"path":"MainModule/Flux/init.luau"}}')}}]);