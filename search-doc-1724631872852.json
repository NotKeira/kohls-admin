[{"title":"Hook","type":0,"sectionRef":"#","url":"/api/Hook","content":"On this page Hook","keywords":""},{"title":"String","type":0,"sectionRef":"#","url":"/api/String","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"String","url":"/api/String#functions","content":" "},{"title":"escapePattern​","type":1,"pageTitle":"String","url":"/api/String#escapePattern","content":"&lt;/&gt; String.escapePattern(s: string) → string Escape magic string pattern characters: % . ( ) [ ] + - * ? ^ $  "},{"title":"escapeRichText​","type":1,"pageTitle":"String","url":"/api/String#escapeRichText","content":"&lt;/&gt; String.escapeRichText(s: string) → string Escape RichText tags  "},{"title":"filterForUser​","type":1,"pageTitle":"String","url":"/api/String#filterForUser","content":"&lt;/&gt; String.filterForUser( message: string, fromUserId: number, toUserId: number, filterContext: Enum.TextFilterContext? ) → string Filters a message with TextService.FilterStringAsync "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#prerequisites","content":"Make sure you have Roblox Studio installed on your environment. Roblox Studio: Download and install Roblox Studio "},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#installation","content":"danger Be aware of models impersonating Kohl's Admin. The model should be made by @Scripth. "},{"title":"Step 1: Acquire the KA Test Loader Model​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#step-1-acquire-the-ka-test-loader-model","content":"Go to the KA Test Loader page.Click the Get Model button to add the model to your inventory. "},{"title":"Step 2: Open Roblox Studio​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#step-2-open-roblox-studio","content":"Launch Roblox Studio on your computer.Open the experience you want to install KA Test Loader or create a new experience. "},{"title":"Step 3: Import the KA Test Loader Model​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#step-3-import-the-ka-test-loader-model","content":"In Roblox Studio, open the Toolbox by selecting View &gt; Toolbox from the top menu.In the Toolbox, click on the Inventory tab and search for KA Test Loader Infinite and click on the model.Click OK on the script warning prompt.Once the KA Test Loader model is in place, save your changes by selecting File &gt; Publish to Roblox. "},{"title":"Step 4: Verify Installation​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#step-4-verify-installation","content":"Open and play the experience that you've imported the model into.Test some basic commands to make sure the admin commands are functioning as expected. tip Still need help? Feel free to join the Kohl's Admin Discord! "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"/api/Checkbox","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#types","content":" "},{"title":"CheckboxDefinition​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#CheckboxDefinition","content":"&lt;/&gt; type CheckboxDefinition = { Value: Types.Stateful&lt;boolean&gt;, _instance: TextButton } A generic function type "},{"title":"Functions​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#new","content":"&lt;/&gt; Checkbox.new(definition: CheckboxDefinition) → () Creates a new checkbox. "},{"title":"Auth","type":0,"sectionRef":"#","url":"/api/Auth","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Auth","url":"/api/Auth#functions","content":" "},{"title":"userRoleAdd​","type":1,"pageTitle":"Auth","url":"/api/Auth#userRoleAdd","content":"&lt;/&gt; Auth.userRoleAdd( userId: number, role: Role, persist: boolean? ) → boolean Adds a role to a user if they don't already have it  "},{"title":"userRoleRemove​","type":1,"pageTitle":"Auth","url":"/api/Auth#userRoleRemove","content":"&lt;/&gt; Auth.userRoleRemove( userId: number, role: Role ) → boolean Removes a role from a user if it exists  "},{"title":"getRank​","type":1,"pageTitle":"Auth","url":"/api/Auth#getRank","content":"&lt;/&gt; Auth.getRank( userId: number, permission: string? ) → ( number, Role ) Checks the maximum role rank of the user, if permission is given it will fetch the highest rank of the roles with that permission  "},{"title":"roleCanUseCommand​","type":1,"pageTitle":"Auth","url":"/api/Auth#roleCanUseCommand","content":"&lt;/&gt; Auth.roleCanUseCommand( role: Role, command: any ) → boolean Checks if a role has access to a command group  "},{"title":"hasCommand​","type":1,"pageTitle":"Auth","url":"/api/Auth#hasCommand","content":"&lt;/&gt; Auth.hasCommand( userId: number, command: any ) → boolean Checks if a user has access to a command  "},{"title":"hasPermission​","type":1,"pageTitle":"Auth","url":"/api/Auth#hasPermission","content":"&lt;/&gt; Auth.hasPermission( userId: number, permission: string ) → boolean Checks if a user has access to a permission  "},{"title":"rankDiff​","type":1,"pageTitle":"Auth","url":"/api/Auth#rankDiff","content":"&lt;/&gt; Auth.rankDiff( userIdFrom: number, userIdTo: number, permission: string? ) → () Gets the difference of two users' ranks, with an optional permission parameter "},{"title":"Custom Commands","type":0,"sectionRef":"#","url":"/docs/custom_commands","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#prerequisites","content":"Make sure you have the Kohl's Admin script in your experience. Ensure that the script has a child folder named &quot;Addons&quot;. By default this folder will contain some example addons. "},{"title":"Addon Setup​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#addon-setup","content":"All custom commands are part of an Addon. For this section we will create addons that only create custom commands, but in later parts we will show the extent of what addons can do. All addons are module scripts that return a function. To start, create a module script and inside of it write the following: return function(_K) -- Addon code goes here! end  Inside of this function is where we will be adding our custom commands. The name of the addon can be anything, but for this example we encourage &quot;customCommands&quot;. danger Appending &quot;Client&quot; or &quot;Server&quot; to the end of an addon file's name will make it only run in that context. This will make the other context unaware of the command! "},{"title":"Creating a Custom Command​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#creating-a-custom-command","content":"To create a custom command, you must register it with the Registry, using registerCommand(). Using this, our module becomes: return function(_K) _K.Registry.registerCommand(_K, commandDefinition) end  commandDefinition is a placeholder for the real contents of our command! Commands require a lot of information, structured in a commandDefinition. type commandDefinition { name: string, -- Name of the command. aliases: { string }?, -- Table of aliases. description: string, -- Description of what the command does. group: string, -- What group the command belongs to. args: { ArgumentDefinition }, -- A table of argument definitions. envClient: {} | () -&gt; {}?, -- Sets up an environment for the command. env: {} | () -&gt; {}?, -- Sets up an environment for the command. runClient: (...any) -&gt; ()?, -- What runs on the client of the player that ran the command. run: (...any) -&gt; ()? -- What the command runs on the server. }  To give an example, this is the code from the ExampleAddon: return function(_K) print(&quot;Hello World from ExampleAddon! IsServer:&quot;, _K.IsServer) _K.Registry.registerCommand(_K, { name = &quot;customcommand&quot;, aliases = { &quot;customcommandalias&quot; }, description = &quot;Custom command description.&quot;, group = &quot;General&quot;, -- Command group to use. args = { { type = &quot;stringGreedy&quot;, name = &quot;Message&quot;, description = &quot;The message to send.&quot;, -- Description shown in command listings. }, }, runClient = function(context, message) -- Function that runs on executing player's client. print(&quot;Custom command ran on the client!&quot;, context, message) end, run = function(context, message) -- Function that runs on the server. print(&quot;Custom command ran on server!&quot;, context, message) local msgObject = Instance.new(&quot;Message&quot;) msgObject.Text = message msgObject.Parent = workspace task.delay(5, function() msgObject:Destroy() end) end, }) end  This command creates a Message instance and populates it with the player provided message. As you can see, the command is registered with a dictionary that lists all information about the command. tip You can put multiple custom commands in one addon! All you need to do is register multiple commands in the same module. In later sections, we'll cover more advanced uses of custom commands, including environments and other advanced functionality. "},{"title":"_K","type":0,"sectionRef":"#","url":"/api/_K","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"_K","url":"/api/_K#types","content":" "},{"title":"Hook​","type":1,"pageTitle":"_K","url":"/api/_K#Hook","content":"&lt;/&gt; type Hook = &quot;log&quot; | &quot;preCommand&quot; | &quot;postCommand&quot;  "},{"title":"Properties​","type":1,"pageTitle":"_K","url":"/api/_K#properties","content":" "},{"title":"Flux​","type":1,"pageTitle":"_K","url":"/api/_K#Flux","content":"&lt;/&gt; _K.Flux: Flux   "},{"title":"Auth​","type":1,"pageTitle":"_K","url":"/api/_K#Auth","content":"&lt;/&gt; _K.Auth: Auth   "},{"title":"Process​","type":1,"pageTitle":"_K","url":"/api/_K#Process","content":"&lt;/&gt; _K.Process: Process   "},{"title":"Registry​","type":1,"pageTitle":"_K","url":"/api/_K#Registry","content":"&lt;/&gt; _K.Registry: Registry   "},{"title":"Util​","type":1,"pageTitle":"_K","url":"/api/_K#Util","content":"&lt;/&gt; _K.Util: Util   "},{"title":"logger​","type":1,"pageTitle":"_K","url":"/api/_K#logger","content":"&lt;/&gt; _K.logger: Logger   "},{"title":"hook​","type":1,"pageTitle":"_K","url":"/api/_K#hook","content":"&lt;/&gt; _K.hook: {[Hook]: RBXScriptSignal }   "},{"title":"bans​","type":1,"pageTitle":"_K","url":"/api/_K#bans","content":"&lt;/&gt; _K.bans: {[string]: {any}}   "},{"title":"settings​","type":1,"pageTitle":"_K","url":"/api/_K#settings","content":"&lt;/&gt; _K.settings: {[string]: {any}}   "},{"title":"logs​","type":1,"pageTitle":"_K","url":"/api/_K#logs","content":"&lt;/&gt; _K.logs: {Log}  "},{"title":"UI","type":0,"sectionRef":"#","url":"/api/UI","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"UI","url":"/api/UI#types","content":" "},{"title":"Platform​","type":1,"pageTitle":"UI","url":"/api/UI#Platform","content":"&lt;/&gt; type Platform = &quot;Console&quot; | &quot;Mobile&quot; | &quot;PC&quot;   "},{"title":"Theme​","type":1,"pageTitle":"UI","url":"/api/UI#Theme","content":"&lt;/&gt; interface Theme { ClackAll: State&lt;boolean&gt; ClackEnabled: State&lt;boolean&gt; Transparency: State&lt;number&gt; Primary: State&lt;Color3 &gt; PrimaryText: State&lt;Color3 &gt; Secondary: State&lt;Color3 &gt; SecondaryText: State&lt;Color3 &gt; Muted: State&lt;Color3 &gt; MutedText: State&lt;Color3 &gt; Border: State&lt;Color3 &gt; BorderMuted: State&lt;Color3 &gt; Valid: State&lt;Color3 &gt; Invalid: State&lt;Color3 &gt; FontSize: State&lt;number&gt; Font: State&lt;Font &gt; FontMono: State&lt;Font &gt; FontHeavy: State&lt;Font &gt; FontBold: State&lt;Font &gt; FontSemiBold: State&lt;Font &gt; FontLight: State&lt;Font &gt; CornerRadius: State&lt;UDim &gt; CornerHalf: State&lt;UDim &gt; CornerDiameter: State&lt;UDim &gt; Padding: State&lt;UDim &gt; PaddingHalf: State&lt;UDim &gt; PaddingDouble: State&lt;UDim &gt; StrokeEnabled: State&lt;boolean&gt; NormalTween: State&lt;TweenInfo &gt; TransparencyClamped: State&lt;number&gt; ScrollMidImage: State&lt;string&gt; ScrollTopImage: State&lt;string&gt; ScrollBottomImage: State&lt;string&gt; } A directory of Flux state for UI components to use as theme variables  "},{"title":"ActiveStateType​","type":1,"pageTitle":"UI","url":"/api/UI#ActiveStateType","content":"&lt;/&gt; type ActiveStateType = &quot;hover&quot; | &quot;floating&quot;  "},{"title":"Properties​","type":1,"pageTitle":"UI","url":"/api/UI#properties","content":" "},{"title":"GuiService​","type":1,"pageTitle":"UI","url":"/api/UI#GuiService","content":"&lt;/&gt; UI.GuiService: GuiService    "},{"title":"TextService​","type":1,"pageTitle":"UI","url":"/api/UI#TextService","content":"&lt;/&gt; UI.TextService: TextService    "},{"title":"UserInputService​","type":1,"pageTitle":"UI","url":"/api/UI#UserInputService","content":"&lt;/&gt; UI.UserInputService: UserInputService    "},{"title":"LocalPlayer​","type":1,"pageTitle":"UI","url":"/api/UI#LocalPlayer","content":"&lt;/&gt; UI.LocalPlayer: Player    "},{"title":"PlayerGui​","type":1,"pageTitle":"UI","url":"/api/UI#PlayerGui","content":"&lt;/&gt; UI.PlayerGui: PlayerGui    "},{"title":"Touch​","type":1,"pageTitle":"UI","url":"/api/UI#Touch","content":"&lt;/&gt; UI.Touch: boolean   "},{"title":"Platform​","type":1,"pageTitle":"UI","url":"/api/UI#Platform","content":"&lt;/&gt; UI.Platform: Platform   "},{"title":"Attribute​","type":1,"pageTitle":"UI","url":"/api/UI#Attribute","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Attribute: newproxy A marker for defining Instance attributes in UI.edit  "},{"title":"Children​","type":1,"pageTitle":"UI","url":"/api/UI#Children","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Children: newproxy A marker for defining Instance children in UI.edit  "},{"title":"Event​","type":1,"pageTitle":"UI","url":"/api/UI#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Event: { Attribute=newproxy, Property=newproxy } Markers for defining events in UI.edit  "},{"title":"Hook​","type":1,"pageTitle":"UI","url":"/api/UI#Hook","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Hook: newproxy A marker for defining UI state hooks in UI.edit  "},{"title":"Nil​","type":1,"pageTitle":"UI","url":"/api/UI#Nil","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Nil: newproxy A marker for defining Nil defaultState in UI.makeStatefulDefaults  "},{"title":"Scope​","type":1,"pageTitle":"UI","url":"/api/UI#Scope","content":"&lt;/&gt; UI.Scope: Scope A scope object for organizing and cleaning up UI states  "},{"title":"TopbarInset​","type":1,"pageTitle":"UI","url":"/api/UI#TopbarInset","content":"&lt;/&gt; UI.TopbarInset: State&lt;Rect &gt; GuiService.TopbarInset as a Flux state  "},{"title":"LayerBottom​","type":1,"pageTitle":"UI","url":"/api/UI#LayerBottom","content":"&lt;/&gt; UI.LayerBottom: State&lt;ScreenGui &gt; The lowermost ScreenGui for UI components  "},{"title":"LayerDefault​","type":1,"pageTitle":"UI","url":"/api/UI#LayerDefault","content":"&lt;/&gt; UI.LayerDefault: State&lt;ScreenGui &gt; The default ScreenGui for UI components  "},{"title":"LayerTop​","type":1,"pageTitle":"UI","url":"/api/UI#LayerTop","content":"&lt;/&gt; UI.LayerTop: State&lt;ScreenGui &gt; The topmost ScreenGui for UI components  "},{"title":"LayerTopBar​","type":1,"pageTitle":"UI","url":"/api/UI#LayerTopBar","content":"&lt;/&gt; UI.LayerTopBar: State&lt;ScreenGui &gt; The TopBar ScreenGui for UI components  "},{"title":"TopBarFrame​","type":1,"pageTitle":"UI","url":"/api/UI#TopBarFrame","content":"&lt;/&gt; UI.TopBarFrame: State&lt;Frame &gt; A sorted TopBar Frame for UI components, parented under UI.LayerTopBar "},{"title":"Functions​","type":1,"pageTitle":"UI","url":"/api/UI#functions","content":" "},{"title":"activateState​","type":1,"pageTitle":"UI","url":"/api/UI#activateState","content":"&lt;/&gt; UI.activateState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to handle activation/deactivation of both floating and hover states  "},{"title":"deactivateState​","type":1,"pageTitle":"UI","url":"/api/UI#deactivateState","content":"&lt;/&gt; UI.deactivateState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to deactivate both floating and hover states  "},{"title":"toggleState​","type":1,"pageTitle":"UI","url":"/api/UI#toggleState","content":"&lt;/&gt; UI.toggleState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to toggle both floating and hover states  "},{"title":"clearState​","type":1,"pageTitle":"UI","url":"/api/UI#clearState","content":"&lt;/&gt; UI.clearState(stateType: ActiveStateType) → () Function to clear a specific state type  "},{"title":"getLuminance​","type":1,"pageTitle":"UI","url":"/api/UI#getLuminance","content":"&lt;/&gt; UI.getLuminance(color: Color3 ) → number Gets the luminance of a Color3  "},{"title":"invertLuminance​","type":1,"pageTitle":"UI","url":"/api/UI#invertLuminance","content":"&lt;/&gt; UI.invertLuminance( color: Color3 , amount: number ) → Color3  Inverts the luminance of a Color3 by an amount  "},{"title":"pointInGuiObject​","type":1,"pageTitle":"UI","url":"/api/UI#pointInGuiObject","content":"&lt;/&gt; UI.pointInGuiObject( x: number, y: number, object: GuiObject ) → () Checks if x, y is within the absolute bounds of the GuiObject  "},{"title":"makeStatefulDefaults​","type":1,"pageTitle":"UI","url":"/api/UI#makeStatefulDefaults","content":"&lt;/&gt; UI.makeStatefulDefaults( default: Dict&lt;any&gt;, definition: SpecialDefinition? ) → () Helper function for defining Flux state defaults  "},{"title":"edit​","type":1,"pageTitle":"UI","url":"/api/UI#edit","content":"&lt;/&gt; UI.edit( new: Instance | Dict&lt;any&gt;, definition: SpecialDefinition | GuiObject ) → Instance | Dict&lt;any&gt; Inherits Flux.edit Parents children to the ._content variable of a UI component if one exists Numeric indicies are defined as children with GuiObject.LayoutOrder set to the index Allows UI.Hook to easily hook to default UI state or RBXScriptSignal aliases  "},{"title":"new​","type":1,"pageTitle":"UI","url":"/api/UI#new","content":"&lt;/&gt; UI.new(className: string) → UI.edit Creates a new Instance with UI.edit  "},{"title":"register​","type":1,"pageTitle":"UI","url":"/api/UI#register","content":"&lt;/&gt; UI.register( className: string, class: Dict&lt;any&gt; ) → () Registers a new UI component class  "},{"title":"registerChildren​","type":1,"pageTitle":"UI","url":"/api/UI#registerChildren","content":"&lt;/&gt; UI.registerChildren() → typeof(UI) Run to register all default children in the UI module "},{"title":"Util","type":0,"sectionRef":"#","url":"/api/Util","content":"On this page Util","keywords":""},{"title":"Remote","type":0,"sectionRef":"#","url":"/api/Remote","content":"On this page Remote","keywords":""},{"title":"Process","type":0,"sectionRef":"#","url":"/api/Process","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Process","url":"/api/Process#functions","content":" "},{"title":"rawParse​","type":1,"pageTitle":"Process","url":"/api/Process#rawParse","content":"&lt;/&gt; Process.rawParse( message: string, prefix: string, delimiter: string? ) → {any}? Parses a string into a raw command format. "},{"title":"addons","type":0,"sectionRef":"#","url":"/docs/addons","content":"addons TBD","keywords":""},{"title":"Logger","type":0,"sectionRef":"#","url":"/api/Logger","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Logger","url":"/api/Logger#types","content":" "},{"title":"LogType​","type":1,"pageTitle":"Logger","url":"/api/Logger#LogType","content":"&lt;/&gt; type LogType = &quot;DEBUG&quot; | &quot;INFO&quot; | &quot;WARN&quot; | &quot;ERROR&quot; | &quot;CHAT&quot; | &quot;COMMAND&quot; | &quot;JOIN&quot; | &quot;LEAVE&quot; | &quot;KILL&quot; | &quot;DEATH&quot; | &quot;DAMAGE&quot; | &quot;PURCHASE&quot; | string   "},{"title":"Log​","type":1,"pageTitle":"Logger","url":"/api/Logger#Log","content":"&lt;/&gt; type Log = { text: string, level: LogType, time: number, user: number? }   "},{"title":"Logger​","type":1,"pageTitle":"Logger","url":"/api/Logger#Logger","content":"&lt;/&gt; type Logger = typeof(setmetatable({}:: { logs: {Log}, debug: boolean? },Logger))  "},{"title":"Flux","type":0,"sectionRef":"#","url":"/api/Flux","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Flux","url":"/api/Flux#types","content":" "},{"title":"Function​","type":1,"pageTitle":"Flux","url":"/api/Flux#Function","content":"&lt;/&gt; type Function = (...any) → ...any A generic function type  "},{"title":"List​","type":1,"pageTitle":"Flux","url":"/api/Flux#List","content":"&lt;/&gt; type List = {T} A generic list type  "},{"title":"Set​","type":1,"pageTitle":"Flux","url":"/api/Flux#Set","content":"&lt;/&gt; type Set = {[T]: boolean} A generic set type implemented as a table with boolean values  "},{"title":"Dict​","type":1,"pageTitle":"Flux","url":"/api/Flux#Dict","content":"&lt;/&gt; type Dict = {[T]: any} Represents a dictionary-like table with keys of type T and values of any type.  "},{"title":"State​","type":1,"pageTitle":"Flux","url":"/api/Flux#State","content":"&lt;/&gt; type State = { _update: (State&lt;T&gt;) → boolean, _dependencies: Set&lt;State&lt;T&gt;&gt;, _dependents: Set&lt;State&lt;T&gt;&gt;, _binds: { [T]: any, _cleanup: List&lt;any&gt; }, _hooks: Dict&lt;Function&gt;, _value: T, _stateful: boolean, _operation: List&lt;any&gt;?, _tweenInfo: TweenInfo | any, set: ( self: State&lt;T&gt;, new: T, force: boolean?, noTween: boolean? ) → State&lt;T&gt;, get: (self: State&lt;T&gt;) → T, hook: ( self: State&lt;T&gt;, callback: Function ) → Function, Destroy: (self: State&lt;T&gt;) → (), bindToProperty: ( self: State&lt;T&gt;, instance: Instanceproperty: string ) → (), bindToAttribute: ( self: State&lt;T&gt;, instance: Instance , attribute: string ) → () } Represents a reactive state object in the Flux system  "},{"title":"Stateful<T>​","type":1,"pageTitle":"Flux","url":"/api/Flux#Stateful<T>","content":"&lt;/&gt; type Stateful&lt;T&gt; = T | State&lt;T&gt; A type for state or raw values  "},{"title":"SpecialKey​","type":1,"pageTitle":"Flux","url":"/api/Flux#SpecialKey","content":"&lt;/&gt; type SpecialKey = {type: &quot;SpecialKey&quot;} A type for state or raw values  "},{"title":"SpecialDefinition​","type":1,"pageTitle":"Flux","url":"/api/Flux#SpecialDefinition","content":"&lt;/&gt; type SpecialDefinition = {[number | string | SpecialKey]: unknown} Represents the definition used in Flux.new and Flux.edit  "},{"title":"Scope​","type":1,"pageTitle":"Flux","url":"/api/Flux#Scope","content":"&lt;/&gt; type Scope = {[any]=Scope | any}  "},{"title":"Properties​","type":1,"pageTitle":"Flux","url":"/api/Flux#properties","content":" "},{"title":"Scope​","type":1,"pageTitle":"Flux","url":"/api/Flux#Scope","content":"&lt;/&gt; Flux.Scope: Scope A scope object for organizing and cleaning up Flux states  "},{"title":"Attribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#Attribute","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Attribute: SpecialKey A marker for defining Instance attributes in Flux.edit  "},{"title":"Children​","type":1,"pageTitle":"Flux","url":"/api/Flux#Children","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Children: SpecialKey A marker for defining Instance children in Flux.edit  "},{"title":"Event​","type":1,"pageTitle":"Flux","url":"/api/Flux#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Event: SpecialKey&amp;{ Attribute=SpecialKey, Property=SpecialKey } Markers for defining events in Flux.edit "},{"title":"Functions​","type":1,"pageTitle":"Flux","url":"/api/Flux#functions","content":" "},{"title":"isState​","type":1,"pageTitle":"Flux","url":"/api/Flux#isState","content":"&lt;/&gt; Flux.isState(object: any) → boolean Checks if an object is a Flux state  "},{"title":"peek​","type":1,"pageTitle":"Flux","url":"/api/Flux#peek","content":"&lt;/&gt; Flux.peek(object: T) → T Gets the current value of a Flux state or returns the input if it's not a state  "},{"title":"peekVariadic​","type":1,"pageTitle":"Flux","url":"/api/Flux#peekVariadic","content":"&lt;/&gt; Flux.peekVariadic(...: any) → ...any Gets the current values of multiple Flux states or non-state inputs  "},{"title":"edit​","type":1,"pageTitle":"Flux","url":"/api/Flux#edit","content":"&lt;/&gt; Flux.edit( instance: Instance , definition: SpecialDefinition&amp;Instance ) → Instance  Edits an existing Instance with Flux state bindings and other properties  "},{"title":"new​","type":1,"pageTitle":"Flux","url":"/api/Flux#new","content":"&lt;/&gt; Flux.new(className: string) → Flux.edit Creates a new Instance with Flux state bindings and other properties  "},{"title":"computeFrom​","type":1,"pageTitle":"Flux","url":"/api/Flux#computeFrom","content":"&lt;/&gt; Flux.computeFrom( computation: (...any) → T, ...: any ) → State&lt;T&gt; Creates a computed state based on other states or static values  "},{"title":"compute​","type":1,"pageTitle":"Flux","url":"/api/Flux#compute","content":"&lt;/&gt; Flux.compute(computation: (use: &lt;U&gt;(U | State&lt;U&gt;) → U?) → T) → State&lt;T&gt; Creates a computed state, passing a use function to access and bind other states  "},{"title":"tween​","type":1,"pageTitle":"Flux","url":"/api/Flux#tween","content":"&lt;/&gt; Flux.tween( tweenInfo: Stateful&lt;TweenInfo &gt;, state: State&lt;T&gt; ) → State&lt;T&gt; Applies TweenService tweens with Instance properties bound to the Flux state  "},{"title":"state​","type":1,"pageTitle":"Flux","url":"/api/Flux#state","content":"&lt;/&gt; Flux.state( initialValue: T | State&lt;T&gt; | Instance , property: string? ) → State&lt;T&gt; Creates a new Flux state with an initial value  "},{"title":"_addDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_addDependency","content":"&lt;/&gt; Flux:_addDependency(dependency: State&lt;T&gt;) → () Adds a dependency to the current state  "},{"title":"_removeDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_removeDependency","content":"&lt;/&gt; Flux:_removeDependency(dependency: State&lt;T&gt;) → () Removes a dependency from the current state  "},{"title":"_update​","type":1,"pageTitle":"Flux","url":"/api/Flux#_update","content":"&lt;/&gt; Flux:_update(noTween: boolean?) → () Updates the state and propagates changes to dependents  "},{"title":"Destroy​","type":1,"pageTitle":"Flux","url":"/api/Flux#Destroy","content":"&lt;/&gt; Flux:Destroy() → () Destroys the state, clearing all dependencies and bindings  "},{"title":"hook​","type":1,"pageTitle":"Flux","url":"/api/Flux#hook","content":"&lt;/&gt; Flux:hook(callback: Function) → Function Adds a hook callback function to be called when the state changes  "},{"title":"get​","type":1,"pageTitle":"Flux","url":"/api/Flux#get","content":"&lt;/&gt; Flux:get() → any Gets the current value of the state  "},{"title":"set​","type":1,"pageTitle":"Flux","url":"/api/Flux#set","content":"&lt;/&gt; Flux:set( new: T, forceUpdate: boolean?, noTween: boolean? ) → State&lt;T&gt; Sets a new value for the state and triggers an update  "},{"title":"bindToProperty​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToProperty","content":"&lt;/&gt; Flux:bindToProperty( instance: Instance , property: string ) → () Binds the state to a property of an Instance  "},{"title":"bindToAttribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToAttribute","content":"&lt;/&gt; Flux:bindToAttribute( instance: Instance , attribute: string ) → () Binds the state to an attribute of an Instance "},{"title":"Promise","type":0,"sectionRef":"#","url":"/api/Promise","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Promise","url":"/api/Promise#types","content":" "},{"title":"Status​","type":1,"pageTitle":"Promise","url":"/api/Promise#Status","content":"enum &lt;/&gt; interface Status { Started: &quot;Started&quot;-- The Promise is executing, and not settled yet. Resolved: &quot;Resolved&quot;-- The Promise finished successfully. Rejected: &quot;Rejected&quot;-- The Promise was rejected. Cancelled: &quot;Cancelled&quot;-- The Promise was cancelled before it finished. } An enum value used to represent the Promise's status. "},{"title":"Properties​","type":1,"pageTitle":"Promise","url":"/api/Promise#properties","content":" "},{"title":"Status​","type":1,"pageTitle":"Promise","url":"/api/Promise#Status","content":"This item is read only and cannot be modified. Read Only enums &lt;/&gt; Promise.Status: Status A table containing all members of the Status enum, e.g., Promise.Status.Resolved. "},{"title":"Functions​","type":1,"pageTitle":"Promise","url":"/api/Promise#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Promise","url":"/api/Promise#new","content":"&lt;/&gt; Promise.new(executor: ( resolve: (...: any) → (), reject: (...: any) → (), onCancel: (abortHandler?: () → ()) → boolean ) → ()) → Promise Construct a new Promise that will be resolved or rejected with the given callbacks. If you resolve with a Promise, it will be chained onto. You can safely yield within the executor function and it will not block the creating thread. local myFunction() return Promise.new(function(resolve, reject, onCancel) wait(1) resolve(&quot;Hello world!&quot;) end) end myFunction():andThen(print) You do not need to use pcall within a Promise. Errors that occur during execution will be caught and turned into a rejection automatically. If error() is called with a table, that table will be the rejection value. Otherwise, string errors will be converted into Promise.Error(Promise.Error.Kind.ExecutionError) objects for tracking debug information. You may register an optional cancellation hook by using the onCancel argument: This should be used to abort any ongoing operations leading up to the promise being settled. Call the onCancel function with a function callback as its only argument to set a hook which will in turn be called when/if the promise is cancelled. onCancel returns true if the Promise was already cancelled when you called onCancel. Calling onCancel with no argument will not override a previously set cancellation hook, but it will still return true if the Promise is currently cancelled. You can set the cancellation hook at any time before resolving. When a promise is cancelled, calls to resolve or reject will be ignored, regardless of if you set a cancellation hook or not. caution If the Promise is cancelled, the executor thread is closed with coroutine.close after the cancellation hook is called. You must perform any cleanup code in the cancellation hook: any time your executor yields, it may never resume.  "},{"title":"defer​","type":1,"pageTitle":"Promise","url":"/api/Promise#defer","content":"&lt;/&gt; Promise.defer(executor: ( resolve: (...: any) → (), reject: (...: any) → (), onCancel: (abortHandler?: () → ()) → boolean ) → ()) → Promise The same as Promise.new, except execution begins after the next Heartbeat event. This is a spiritual replacement for spawn, but it does not suffer from the same issues as spawn. local function waitForChild(instance, childName, timeout) return Promise.defer(function(resolve, reject) local child = instance:WaitForChild(childName, timeout) ;(child and resolve or reject)(child) end) end   "},{"title":"resolve​","type":1,"pageTitle":"Promise","url":"/api/Promise#resolve","content":"&lt;/&gt; Promise.resolve(...: any) → Promise&lt;...any&gt; Creates an immediately resolved Promise with the given value. -- Example using Promise.resolve to deliver cached values: function getSomething(name) if cache[name] then return Promise.resolve(cache[name]) else return Promise.new(function(resolve, reject) local thing = getTheThing() cache[name] = thing resolve(thing) end) end end   "},{"title":"reject​","type":1,"pageTitle":"Promise","url":"/api/Promise#reject","content":"&lt;/&gt; Promise.reject(...: any) → Promise&lt;...any&gt; Creates an immediately rejected Promise with the given value. caution Something needs to consume this rejection (i.e. :catch() it), otherwise it will emit an unhandled Promise rejection warning on the next frame. Thus, you should not create and store rejected Promises for later use. Only create them on-demand as needed.  "},{"title":"try​","type":1,"pageTitle":"Promise","url":"/api/Promise#try","content":"&lt;/&gt; Promise.try( callback: (...: T...) → ...any, ...: T...-- Additional arguments passed to callback ) → Promise Begins a Promise chain, calling a function and returning a Promise resolving with its return value. If the function errors, the returned Promise will be rejected with the error. You can safely yield within the Promise.try callback. info Promise.try is similar to Promise.promisify, except the callback is invoked immediately instead of returning a new function. Promise.try(function() return math.random(1, 2) == 1 and &quot;ok&quot; or error(&quot;Oh an error!&quot;) end) :andThen(function(text) print(text) end) :catch(function(err) warn(&quot;Something went wrong&quot;) end)   "},{"title":"all​","type":1,"pageTitle":"Promise","url":"/api/Promise#all","content":"&lt;/&gt; Promise.all(promises: {Promise&lt;T&gt;}) → Promise&lt;{T}&gt; Accepts an array of Promises and returns a new promise that: is resolved after all input promises resolve. is rejected if any input promises reject. info Only the first return value from each promise will be present in the resulting array. After any input Promise rejects, all other input Promises that are still pending will be cancelled if they have no other consumers. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.all(promises)   "},{"title":"fold​","type":1,"pageTitle":"Promise","url":"/api/Promise#fold","content":"since v3.1.0 &lt;/&gt; Promise.fold( list: {T | Promise&lt;T&gt;}, reducer: ( accumulator: U, value: T, index: number ) → U | Promise&lt;U&gt;, initialValue: U ) → () Folds an array of values or promises into a single value. The array is traversed sequentially. The reducer function can return a promise or value directly. Each iteration receives the resolved value from the previous, and the first receives your defined initial value. The folding will stop at the first rejection encountered. local basket = {&quot;blueberry&quot;, &quot;melon&quot;, &quot;pear&quot;, &quot;melon&quot;} Promise.fold(basket, function(cost, fruit) if fruit == &quot;blueberry&quot; then return cost -- blueberries are free! else -- call a function that returns a promise with the fruit price return fetchPrice(fruit):andThen(function(fruitCost) return cost + fruitCost end) end end, 0)   "},{"title":"some​","type":1,"pageTitle":"Promise","url":"/api/Promise#some","content":"&lt;/&gt; Promise.some( promises: {Promise&lt;T&gt;}, count: number ) → Promise&lt;{T}&gt; Accepts an array of Promises and returns a Promise that is resolved as soon as count Promises are resolved from the input array. The resolved array values are in the order that the Promises resolved in. When this Promise resolves, all other pending Promises are cancelled if they have no other consumers. count 0 results in an empty array. The resultant array will never have more than count elements. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.some(promises, 2) -- Only resolves with first 2 promises to resolve   "},{"title":"any​","type":1,"pageTitle":"Promise","url":"/api/Promise#any","content":"&lt;/&gt; Promise.any(promises: {Promise&lt;T&gt;}) → Promise&lt;T&gt; Accepts an array of Promises and returns a Promise that is resolved as soon as any of the input Promises resolves. It will reject only if all input Promises reject. As soon as one Promises resolves, all other pending Promises are cancelled if they have no other consumers. Resolves directly with the value of the first resolved Promise. This is essentially [Promise.some] with 1 count, except the Promise resolves with the value directly instead of an array with one element. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.any(promises) -- Resolves with first value to resolve (only rejects if all 3 rejected)   "},{"title":"allSettled​","type":1,"pageTitle":"Promise","url":"/api/Promise#allSettled","content":"&lt;/&gt; Promise.allSettled(promises: {Promise&lt;T&gt;}) → Promise&lt;{Status}&gt; Accepts an array of Promises and returns a new Promise that resolves with an array of in-place Statuses when all input Promises have settled. This is equivalent to mapping promise:finally over the array of Promises. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.allSettled(promises)   "},{"title":"race​","type":1,"pageTitle":"Promise","url":"/api/Promise#race","content":"&lt;/&gt; Promise.race(promises: {Promise&lt;T&gt;}) → Promise&lt;T&gt; Accepts an array of Promises and returns a new promise that is resolved or rejected as soon as any Promise in the array resolves or rejects. warning If the first Promise to settle from the array settles with a rejection, the resulting Promise from race will reject. If you instead want to tolerate rejections, and only care about at least one Promise resolving, you should use Promise.any or Promise.some instead. All other Promises that don't win the race will be cancelled if they have no other consumers. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.race(promises) -- Only returns 1st value to resolve or reject   "},{"title":"each​","type":1,"pageTitle":"Promise","url":"/api/Promise#each","content":"since 3.0.0 &lt;/&gt; Promise.each( list: {T | Promise&lt;T&gt;}, predicate: ( value: T, index: number ) → U | Promise&lt;U&gt; ) → Promise&lt;{U}&gt; Iterates serially over the given an array of values, calling the predicate callback on each value before continuing. If the predicate returns a Promise, we wait for that Promise to resolve before moving on to the next item in the array. info Promise.each is similar to Promise.all, except the Promises are ran in order instead of all at once. But because Promises are eager, by the time they are created, they're already running. Thus, we need a way to defer creation of each Promise until a later time. The predicate function exists as a way for us to operate on our data instead of creating a new closure for each Promise. If you would prefer, you can pass in an array of functions, and in the predicate, call the function and return its return value. Promise.each({ &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot; }, function(value, index) return Promise.delay(1):andThen(function() print((&quot;%d) Got %s!&quot;):format(index, value)) end) end) --[[ (1 second passes) &gt; 1) Got foo! (1 second passes) &gt; 2) Got bar! (1 second passes) &gt; 3) Got baz! (1 second passes) &gt; 4) Got qux! ]] If the Promise a predicate returns rejects, the Promise from Promise.each is also rejected with the same value. If the array of values contains a Promise, when we get to that point in the list, we wait for the Promise to resolve before calling the predicate with the value. If a Promise in the array of values is already Rejected when Promise.each is called, Promise.each rejects with that value immediately (the predicate callback will never be called even once). If a Promise in the list is already Cancelled when Promise.each is called, Promise.each rejects with Promise.Error(Promise.Error.Kind.AlreadyCancelled). If a Promise in the array of values is Started at first, but later rejects, Promise.each will reject with that value and iteration will not continue once iteration encounters that value. Returns a Promise containing an array of the returned/resolved values from the predicate for each item in the array of values. If this Promise returned from Promise.each rejects or is cancelled for any reason, the following are true: Iteration will not continue. Any Promises within the array of values will now be cancelled if they have no other consumers. The Promise returned from the currently active predicate will be cancelled if it hasn't resolved yet.  "},{"title":"is​","type":1,"pageTitle":"Promise","url":"/api/Promise#is","content":"&lt;/&gt; Promise.is(object: any) → boolean-- true if the given object is a Promise. Checks whether the given object is a Promise via duck typing. This only checks if the object is a table and has an andThen method.  "},{"title":"promisify​","type":1,"pageTitle":"Promise","url":"/api/Promise#promisify","content":"&lt;/&gt; Promise.promisify(callback: (...: any) → ...any) → (...: any) → Promise Wraps a function that yields into one that returns a Promise. Any errors that occur while executing the function will be turned into rejections. info Promise.promisify is similar to Promise.try, except the callback is returned as a callable function instead of being invoked immediately. local sleep = Promise.promisify(wait) sleep(1):andThen(print) local isPlayerInGroup = Promise.promisify(function(player, groupId) return player:IsInGroup(groupId) end)   "},{"title":"delay​","type":1,"pageTitle":"Promise","url":"/api/Promise#delay","content":"&lt;/&gt; Promise.delay(seconds: number) → Promise&lt;number&gt; Returns a Promise that resolves after seconds seconds have passed. The Promise resolves with the actual amount of time that was waited. This function is not a wrapper around wait. Promise.delay uses a custom scheduler which provides more accurate timing. As an optimization, cancelling this Promise instantly removes the task from the scheduler. warning Passing NaN, infinity, or a number less than 1/60 is equivalent to passing 1/60. Promise.delay(5):andThenCall(print, &quot;This prints after 5 seconds&quot;)   "},{"title":"retry​","type":1,"pageTitle":"Promise","url":"/api/Promise#retry","content":"since 3.0.0 &lt;/&gt; Promise.retry( callback: (...: P) → Promise&lt;T&gt;, times: number, ...?: P ) → Promise&lt;T&gt; Repeatedly calls a Promise-returning function up to times number of times, until the returned Promise resolves. If the amount of retries is exceeded, the function will return the latest rejected Promise. local function canFail(a, b, c) return Promise.new(function(resolve, reject) -- do something that can fail local failed, thing = doSomethingThatCanFail(a, b, c) if failed then reject(&quot;it failed&quot;) else resolve(thing) end end) end local MAX_RETRIES = 10 local value = Promise.retry(canFail, MAX_RETRIES, &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;) -- args to send to canFail   "},{"title":"retryWithDelay​","type":1,"pageTitle":"Promise","url":"/api/Promise#retryWithDelay","content":"since v3.2.0 &lt;/&gt; Promise.retryWithDelay( callback: (...: P) → Promise&lt;T&gt;, times: number, seconds: number, ...?: P ) → Promise&lt;T&gt; Repeatedly calls a Promise-returning function up to times number of times, waiting seconds seconds between each retry, until the returned Promise resolves. If the amount of retries is exceeded, the function will return the latest rejected Promise.  "},{"title":"fromEvent​","type":1,"pageTitle":"Promise","url":"/api/Promise#fromEvent","content":"since 3.0.0 &lt;/&gt; Promise.fromEvent( event: Event,-- Any object with a Connect method. This includes all Roblox events. predicate?: (...: P) → boolean-- A function which determines if the Promise should resolve with the given value, or wait for the next event to check again. ) → Promise&lt;P&gt; Converts an event into a Promise which resolves the next time the event fires. The optional predicate callback, if passed, will receive the event arguments and should return true or false, based on if this fired event should resolve the Promise or not. If true, the Promise resolves. If false, nothing happens and the predicate will be rerun the next time the event fires. The Promise will resolve with the event arguments. tip This function will work given any object with a Connect method. This includes all Roblox events. -- Creates a Promise which only resolves when `somePart` is touched -- by a part named `&quot;Something specific&quot;`. return Promise.fromEvent(somePart.Touched, function(part) return part.Name == &quot;Something specific&quot; end)   "},{"title":"onUnhandledRejection​","type":1,"pageTitle":"Promise","url":"/api/Promise#onUnhandledRejection","content":"since v3.2.0 &lt;/&gt; Promise.onUnhandledRejection( callback: ( promise: Promise, ...: any )-- A callback that runs when an unhandled rejection happens. ) → () → ()-- Function that unregisters the callback when called Registers a callback that runs when an unhandled rejection happens. An unhandled rejection happens when a Promise is rejected, and the rejection is not observed with :catch. The callback is called with the actual promise that rejected, followed by the rejection values.  "},{"title":"timeout​","type":1,"pageTitle":"Promise","url":"/api/Promise#timeout","content":"&lt;/&gt; Promise:timeout( seconds: number, rejectionValue?: any-- The value to reject with if the timeout is reached ) → Promise Returns a new Promise that resolves if the chained Promise resolves within seconds seconds, or rejects if execution time exceeds seconds. The chained Promise will be cancelled if the timeout is reached. Rejects with rejectionValue if it is non-nil. If a rejectionValue is not given, it will reject with a Promise.Error(Promise.Error.Kind.TimedOut). This can be checked with [[Error.isKind]]. getSomething():timeout(5):andThen(function(something) -- got something and it only took at max 5 seconds end):catch(function(e) -- Either getting something failed or the time was exceeded. if Promise.Error.isKind(e, Promise.Error.Kind.TimedOut) then warn(&quot;Operation timed out!&quot;) else warn(&quot;Operation encountered an error!&quot;) end end) Sugar for: Promise.race({ Promise.delay(seconds):andThen(function() return Promise.reject( rejectionValue == nil and Promise.Error.new({ kind = Promise.Error.Kind.TimedOut }) or rejectionValue ) end), promise })   "},{"title":"getStatus​","type":1,"pageTitle":"Promise","url":"/api/Promise#getStatus","content":"&lt;/&gt; Promise:getStatus() → Status Returns the current Promise status.  "},{"title":"andThen​","type":1,"pageTitle":"Promise","url":"/api/Promise#andThen","content":"&lt;/&gt; Promise:andThen( successHandler: (...: any) → ...any, failureHandler?: (...: any) → ...any ) → Promise&lt;...any&gt; Chains onto an existing Promise and returns a new Promise. warning Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call tostring on it first. You can return a Promise from the success or failure handler and it will be chained onto. Calling andThen on a cancelled Promise returns a cancelled Promise. tip If the Promise returned by andThen is cancelled, successHandler and failureHandler will not run. To run code no matter what, use Promise:finally.  "},{"title":"catch​","type":1,"pageTitle":"Promise","url":"/api/Promise#catch","content":"&lt;/&gt; Promise:catch(failureHandler: (...: any) → ...any) → Promise&lt;...any&gt; Shorthand for Promise:andThen(nil, failureHandler). Returns a Promise that resolves if the failureHandler worked without encountering an additional error. warning Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call tostring on it first. Calling catch on a cancelled Promise returns a cancelled Promise. tip If the Promise returned by catch is cancelled, failureHandler will not run. To run code no matter what, use Promise:finally.  "},{"title":"tap​","type":1,"pageTitle":"Promise","url":"/api/Promise#tap","content":"&lt;/&gt; Promise:tap(tapHandler: (...: any) → ...any) → Promise&lt;...any&gt; Similar to Promise.andThen, except the return value is the same as the value passed to the handler. In other words, you can insert a :tap into a Promise chain without affecting the value that downstream Promises receive. getTheValue() :tap(print) :andThen(function(theValue) print(&quot;Got&quot;, theValue, &quot;even though print returns nil!&quot;) end) If you return a Promise from the tap handler callback, its value will be discarded but tap will still wait until it resolves before passing the original value through.  "},{"title":"andThenCall​","type":1,"pageTitle":"Promise","url":"/api/Promise#andThenCall","content":"&lt;/&gt; Promise:andThenCall( callback: (...: any) → any, ...?: any-- Additional arguments which will be passed to callback ) → Promise Attaches an andThen handler to this Promise that calls the given callback with the predefined arguments. The resolved value is discarded. promise:andThenCall(someFunction, &quot;some&quot;, &quot;arguments&quot;) This is sugar for promise:andThen(function() return someFunction(&quot;some&quot;, &quot;arguments&quot;) end)   "},{"title":"andThenReturn​","type":1,"pageTitle":"Promise","url":"/api/Promise#andThenReturn","content":"&lt;/&gt; Promise:andThenReturn( ...: any-- Values to return from the function ) → Promise Attaches an andThen handler to this Promise that discards the resolved value and returns the given value from it. promise:andThenReturn(&quot;some&quot;, &quot;values&quot;) This is sugar for promise:andThen(function() return &quot;some&quot;, &quot;values&quot; end) caution Promises are eager, so if you pass a Promise to andThenReturn, it will begin executing before andThenReturn is reached in the chain. Likewise, if you pass a Promise created from [Promise.reject] into andThenReturn, it's possible that this will trigger the unhandled rejection warning. If you need to return a Promise, it's usually best practice to use [Promise.andThen].  "},{"title":"cancel​","type":1,"pageTitle":"Promise","url":"/api/Promise#cancel","content":"&lt;/&gt; Promise:cancel() → () Cancels this promise, preventing the promise from resolving or rejecting. Does not do anything if the promise is already settled. Cancellations will propagate upwards and downwards through chained promises. Promises will only be cancelled if all of their consumers are also cancelled. This is to say that if you call andThen twice on the same promise, and you cancel only one of the child promises, it will not cancel the parent promise until the other child promise is also cancelled. promise:cancel()   "},{"title":"finally​","type":1,"pageTitle":"Promise","url":"/api/Promise#finally","content":"&lt;/&gt; Promise:finally(finallyHandler: (status: Status) → ...any) → Promise&lt;...any&gt; Set a handler that will be called regardless of the promise's fate. The handler is called when the promise is resolved, rejected, or cancelled. Returns a new Promise that: resolves with the same values that this Promise resolves with. rejects with the same values that this Promise rejects with. is cancelled if this Promise is cancelled. If the value you return from the handler is a Promise: We wait for the Promise to resolve, but we ultimately discard the resolved value. If the returned Promise rejects, the Promise returned from finally will reject with the rejected value from the returned promise. If the finally Promise is cancelled, and you returned a Promise from the handler, we cancel that Promise too. Otherwise, the return value from the finally handler is entirely discarded. Cancellation As of Promise v4, Promise:finally does not count as a consumer of the parent Promise for cancellation purposes. This means that if all of a Promise's consumers are cancelled and the only remaining callbacks are finally handlers, the Promise is cancelled and the finally callbacks run then and there. Cancellation still propagates through the finally Promise though: if you cancel the finally Promise, it can cancel its parent Promise if it had no other consumers. Likewise, if the parent Promise is cancelled, the finally Promise will also be cancelled. local thing = createSomething() doSomethingWith(thing) :andThen(function() print(&quot;It worked!&quot;) -- do something.. end) :catch(function() warn(&quot;Oh no it failed!&quot;) end) :finally(function() -- either way, destroy thing thing:Destroy() end)   "},{"title":"finallyCall​","type":1,"pageTitle":"Promise","url":"/api/Promise#finallyCall","content":"&lt;/&gt; Promise:finallyCall( callback: (...: any) → any, ...?: any-- Additional arguments which will be passed to callback ) → Promise Same as andThenCall, except for finally. Attaches a finally handler to this Promise that calls the given callback with the predefined arguments.  "},{"title":"finallyReturn​","type":1,"pageTitle":"Promise","url":"/api/Promise#finallyReturn","content":"&lt;/&gt; Promise:finallyReturn( ...: any-- Values to return from the function ) → Promise Attaches a finally handler to this Promise that discards the resolved value and returns the given value from it. promise:finallyReturn(&quot;some&quot;, &quot;values&quot;) This is sugar for promise:finally(function() return &quot;some&quot;, &quot;values&quot; end)   "},{"title":"awaitStatus​","type":1,"pageTitle":"Promise","url":"/api/Promise#awaitStatus","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Promise:awaitStatus() → ( Status,-- The Status representing the fate of the Promise ...any-- The values the Promise resolved or rejected with. ) Yields the current thread until the given Promise completes. Returns the Promise's status, followed by the values that the promise resolved or rejected with.  "},{"title":"await​","type":1,"pageTitle":"Promise","url":"/api/Promise#await","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Promise:await() → ( boolean,-- true if the Promise successfully resolved ...any-- The values the Promise resolved or rejected with. ) Yields the current thread until the given Promise completes. Returns true if the Promise resolved, followed by the values that the promise resolved or rejected with. caution If the Promise gets cancelled, this function will return false, which is indistinguishable from a rejection. If you need to differentiate, you should use [Promise.awaitStatus] instead. local worked, value = getTheValue():await() if worked then print(&quot;got&quot;, value) else warn(&quot;it failed&quot;) end   "},{"title":"expect​","type":1,"pageTitle":"Promise","url":"/api/Promise#expect","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Promise:expect() → ...any-- The values the Promise resolved with. Yields the current thread until the given Promise completes. Returns the values that the promise resolved with. local worked = pcall(function() print(&quot;got&quot;, getTheValue():expect()) end) if not worked then warn(&quot;it failed&quot;) end This is essentially sugar for: select(2, assert(promise:await())) Errors if the Promise rejects or gets cancelled. "},{"title":"Errors","type":1,"pageTitle":"Promise","url":"/api/Promise##","content":"Type\tDescriptionany\tErrors with the rejection value if this Promise rejects or gets cancelled.  "},{"title":"now​","type":1,"pageTitle":"Promise","url":"/api/Promise#now","content":"&lt;/&gt; Promise:now( rejectionValue?: any-- The value to reject with if the Promise isn't resolved ) → Promise Chains a Promise from this one that is resolved if this Promise is already resolved, and rejected if it is not resolved at the time of calling :now(). This can be used to ensure your andThen handler occurs on the same frame as the root Promise execution. doSomething() :now() :andThen(function(value) print(&quot;Got&quot;, value, &quot;synchronously.&quot;) end) If this Promise is still running, Rejected, or Cancelled, the Promise returned from :now() will reject with the rejectionValue if passed, otherwise with a Promise.Error(Promise.Error.Kind.NotResolvedInTime). This can be checked with [[Error.isKind]]. "},{"title":"Registry","type":0,"sectionRef":"#","url":"/api/Registry","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Registry","url":"/api/Registry#types","content":" "},{"title":"ArgumentFunction​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentFunction","content":"&lt;/&gt; type ArgumentFunction = ( value: any, from: Player ) → ...any   "},{"title":"ArgumentDefinition​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentDefinition","content":"&lt;/&gt; type ArgumentDefinition = { type: string, name: string, description: string, optional: boolean?, lowerRank: boolean?, ignoreSelf: boolean?, shouldRequest: boolean? }  "},{"title":"Properties​","type":1,"pageTitle":"Registry","url":"/api/Registry#properties","content":" "},{"title":"types​","type":1,"pageTitle":"Registry","url":"/api/Registry#types","content":"&lt;/&gt; Registry.types: {[string]: ArgumentType}   "},{"title":"commands​","type":1,"pageTitle":"Registry","url":"/api/Registry#commands","content":"&lt;/&gt; Registry.commands: {[string]: CommandDefinition}   "},{"title":"commandsList​","type":1,"pageTitle":"Registry","url":"/api/Registry#commandsList","content":"&lt;/&gt; Registry.commandsList: {CommandDefinition}  "},{"title":"Functions​","type":1,"pageTitle":"Registry","url":"/api/Registry#functions","content":" "},{"title":"makeEnumType​","type":1,"pageTitle":"Registry","url":"/api/Registry#makeEnumType","content":"&lt;/&gt; Registry.makeEnumType( typeName: string, enumItems: {EnumItem | string} ) → () Makes an Enum command type definition  "},{"title":"registerType​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerType","content":"&lt;/&gt; Registry.registerType( name: string, typeObject: ArgumentType, override: Dict? ) → () "},{"title":"Types","type":1,"pageTitle":"Registry","url":"/api/Registry##","content":""},{"title":"​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentType","content":"type ArgumentType = { name: string, displayName: string?, listable: boolean?, transform: ArgumentFunction?, validate: ArgumentFunction, parse: ArgumentFunction, preParse: ArgumentFunction?, postParse: ArgumentFunction?, suggestions: ArgumentFunction?, prefixes: {[string]: string}? }  Registers a command type  "},{"title":"registerCommand​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommand","content":"&lt;/&gt; Registry.registerCommand( _K: any, commandObject: CommandDefinition ) → () "},{"title":"Types","type":1,"pageTitle":"Registry","url":"/api/Registry##","content":""},{"title":"​","type":1,"pageTitle":"Registry","url":"/api/Registry#CommandDefinition","content":"type CommandDefinition = ={ name: string, aliases: {string}?, description: string, group: string, args: {ArgumentDefinition}, envClient: {} | () → {}?, env: {} | () → {}?, runClient: (...any) → ()?, run: (...any) → ()? }  Registers a command  "},{"title":"registerCommandAlias​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommandAlias","content":"&lt;/&gt; Registry.registerCommandAlias( _K: any, alias: string, command: string ) → () Registers a local command alias  "},{"title":"registerCommandModule​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommandModule","content":"&lt;/&gt; Registry.registerCommandModule( _K: any, commandModule: ModuleScript ) → () Registers a list of commands with the module name as the command group "}]